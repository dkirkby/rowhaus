#!/usr/bin/env python

import sys
import time
import argparse
import multiprocessing
import queue

import flask


class Simulator(multiprocessing.Process):

    def __init__(self, queue):
        multiprocessing.Process.__init__(self)
        self.exit = multiprocessing.Event()
        self.queue = queue
        self.count = 0

    def run(self):
        while not self.exit.is_set():
            now = time.time()
            delay = 1.
            time.sleep(delay)
            payload = (self.count, now, delay, 0.05 * delay)
            if self.queue.full():
                self.queue.get()
            self.queue.put(payload)
            self.count += 1
        self.queue.close()

    def shutdown(self):
        self.exit.set()


class SwitchMonitor(multiprocessing.Process):

    def __init__(self, queue):
        multiprocessing.Process.__init__(self)
        self.exit = multiprocessing.Event()
        self.queue = queue
        self.SWITCH = 5
        GPIO.setmode(GPIO.BOARD)
        # Channel has a hardware pullup.
        GPIO.setup(self.SWITCH, GPIO.IN)

        self.count = 0
        self.last_time = [0, time.time()]
        self.last_state = -1

    def edge(self, pin):
        if pin != self.SWITCH:
            return
        new_state = GPIO.input(self.SWITCH)
        new_time = time.time()
        if new_state == 1 and self.last_state == 0:
            # Calculate elapsed times.
            payload = self.count, new_time, new_time - self.last_time[1], new_time - self.last_time[0]
            if self.queue.full():
                self.queue.get()
            self.queue.put(payload)
            self.count += 1
        self.last_time[new_state] = new_time
        self.last_state = new_state

    def run(self):
        GPIO.add_event_detect(self.SWITCH, GPIO.BOTH, callback=self.edge, bouncetime=1)
        while not self.exit.is_set():
            time.sleep(10)
        self.queue.close()

    def shutdown(self):
        self.exit.set()


app = flask.Flask(__name__, static_url_path='')

@app.route('/')
def root():
    return app.send_static_file('index.html')

q = multiprocessing.Queue(maxsize=16)

@app.route('/monitor')
def monitor():
    try:
        count, t, dt1, dt2 = q.get(block=False)
        return flask.jsonify(count=count, t=t, dt1=dt1, dt2=dt2)
    except queue.Empty:
        return flask.jsonify({})


def main():
    parser = argparse.ArgumentParser(
        description='Rowing machine user interface',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-v', '--verbose', action='store_true', help='be verbose')
    parser.add_argument('-t', '--test', action='store_true', help='local testing mode')
    parser.add_argument('-d', '--debug', action='store_true', help='run flask app in debug mode')
    args = parser.parse_args()

    # Initialize the background process to monitor the rowing machine.
    if args.test:
        p = Simulator(q)
    else:
        try:
            # Use GPIO to monitor the rowing machine.
            import RPi.GPIO as GPIO
            p = SwitchMonitor(q)
        except ImportError:
            print('Cannot import GPIO library. Are you running on a raspberry pi?')
            return -1
    p.start()

    # Start the web server.
    host,  port = (None, None) if args.test else ('0.0.0.0', 80)
    app.run(host=host, port=port, debug=args.debug)


if __name__ == '__main__':
    sys.exit(main())
