#!/usr/bin/env python

import sys
import time
import argparse
import multiprocessing
import queue
import json

import flask

try:
    import RPi.GPIO as GPIO
except ImportError:
    pass


class RowerProcess(multiprocessing.Process):
    """Base class for a subprocess to read and transmit rowing machine state.
    """
    def __init__(self, queue):
        multiprocessing.Process.__init__(self)
        self.queue = queue
        self.running = multiprocessing.Event()
        self.running.clear()
        self.count = 0

    def send(self, payload):
        """Send a new payload from the child process."""
        # Do nothing unless we are in the running state.
        if self.running.is_set():
            if self.queue.full():
                # Remove the oldest queue entry to make space for this new one.
                self.queue.get()
            self.queue.put(payload)
            self.count += 1

    def reset(self):
        """Called by the parent process to reset the child."""
        print('Resetting child')
        self.running.clear()
        # Drain the queue.
        while not self.queue.empty():
            self.queue.get()
        self.running.set()


class Simulator(RowerProcess):

    def __init__(self, queue):
        RowerProcess.__init__(self, queue)

    def run(self):
        # Generate a continuous stream of periodic updates.
        while True:
            for delay in (1.5, 2.5):
                time.sleep(delay)
                payload = (self.count, time.time(), delay, 0.05 * delay)
                self.send(payload)


class SwitchMonitor(RowerProcess):

    def __init__(self, queue):
        RowerProcess.__init__(self, queue)
        self.SWITCH = 5
        GPIO.setmode(GPIO.BOARD)
        # Channel has a hardware pullup.
        GPIO.setup(self.SWITCH, GPIO.IN)
        self.last_time = [0, time.time()]
        self.last_state = -1

    def edge(self, pin):
        if pin != self.SWITCH:
            return
        new_state = GPIO.input(self.SWITCH)
        new_time = time.time()
        if new_state == 1 and self.last_state == 0:
            # Calculate elapsed times.
            payload = self.count, new_time, new_time - self.last_time[1], new_time - self.last_time[0]
            self.send(payload)
        self.last_time[new_state] = new_time
        self.last_state = new_state

    def run(self):
        GPIO.add_event_detect(self.SWITCH, GPIO.BOTH, callback=self.edge, bouncetime=1)
        while True:
            time.sleep(600)


app = flask.Flask(__name__, static_url_path='')

@app.route('/')
def root():
    return app.send_static_file('index.html')

@app.route('/debug')
def debug():
    return app.send_static_file('debug.html')

@app.route('/workouts/<name>')
def workout(name):
    with open('workouts/' + str(name) + '.json') as f:
        content = json.load(f)
        return flask.jsonify(content)

proc = None
q = multiprocessing.Queue(maxsize=16)

@app.route('/monitor')
def monitor():
    try:
        count, t, dt1, dt2 = q.get(block=False)
        return flask.jsonify(count=count, t=t, dt1=dt1, dt2=dt2)
    except queue.Empty:
        return flask.jsonify({})

@app.route('/reset')
def reset():
    print('Parent sending reset')
    proc.reset()
    return ''


def main():
    parser = argparse.ArgumentParser(
        description='Rowing machine user interface',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-v', '--verbose', action='store_true', help='be verbose')
    parser.add_argument('-t', '--test', action='store_true', help='local testing mode')
    parser.add_argument('-d', '--debug', action='store_true', help='run flask app in debug mode')
    args = parser.parse_args()

    # Initialize the background process to monitor the rowing machine.
    global proc
    if args.test:
        proc = Simulator(q)
    else:
        try:
            proc = SwitchMonitor(q)
        except ImportError:
            print('Cannot import GPIO library. Are you running on a raspberry pi?')
            return -1
    proc.start()

    # Start the web server.
    host,  port = (None, None) if args.test else ('0.0.0.0', 80)
    app.run(host=host, port=port, debug=args.debug)


if __name__ == '__main__':
    sys.exit(main())
